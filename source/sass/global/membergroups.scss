/***********************************************
 The Bone Market — Member Group Gradients (RGB)
 SCSS maps + mixins to auto-generate classes.
***********************************************/

/* ── 1) GRADIENT MAPS ───────────────────────── */
$gradients-precious: (
  /* kept neutral black glassy */
  obsidian: linear-gradient(135deg, rgb(11,11,12),  rgb(58,58,61)),
  /* cooler opalescent (unchanged from your latest) */
  quartz:   linear-gradient(135deg, rgb(216,239,255), rgb(202,191,255)),
  /* warmer charcoal to separate from obsidian/smoke */
  onyx:     linear-gradient(135deg, rgb(22,18,16),   rgb(74,56,52)),
  /* classic warm amber */
  amber:    linear-gradient(135deg, rgb(255,179,71), rgb(255,204,51)),
  /* emerald with soft sage highlight (kept) */
  jade:     linear-gradient(135deg, rgb(63,163,116), rgb(161,209,157)),
  /* steel-blue silver (less like glass/orbit) */
  silver:   linear-gradient(135deg, rgb(176,196,210), rgb(120,144,160))
);

$gradients-anatomy: (
  /* pink-beige marrow (kept) */
  marrow: linear-gradient(135deg, rgb(241,230,220), rgb(187,169,152)),
  /* tendon tan/brown (kept) */
  sinew:  linear-gradient(135deg, rgb(213,169,129), rgb(140,91,60)),
  /* deep crimson (kept) */
  blood:  linear-gradient(135deg, rgb(122,13,29),   rgb(217,43,43)),
  /* oxygenated blue vein (kept) */
  vein:   linear-gradient(135deg, rgb(33,51,77),    rgb(72,107,148)),
  /* cooler greige bone so it’s not ivory-twin */
  bone:   linear-gradient(135deg, rgb(222,218,200), rgb(170,160,132)),
  /* peachy flesh (kept) */
  flesh:  linear-gradient(135deg, rgb(245,195,181), rgb(217,143,128))
);

$gradients-celestial: (
  /* black → violet eclipse (kept) */
  eclipse: linear-gradient(135deg, rgb(25,25,25),   rgb(74,59,94)),
  /* flare orange (kept) */
  nova:    linear-gradient(135deg, rgb(255,138,0),  rgb(255,61,0)),
  /* sky blue → ice (kept) */
  comet:   linear-gradient(135deg, rgb(75,143,210), rgb(197,223,255)),
  /* push toward teal to escape comet/glass/silver */
  orbit:   linear-gradient(135deg, rgb(54,90,100),  rgb(120,170,180)),
  /* deep navy-indigo instead of purple-near eclipse */
  umbra:   linear-gradient(135deg, rgb(8,16,32),    rgb(32,64,112)),
  /* bright solar yellow (kept) */
  zenith:  linear-gradient(135deg, rgb(246,229,141),rgb(249,202,36))
);

$gradients-flora: (
  /* dark teal-green (kept) */
  hemlock:    linear-gradient(135deg, rgb(28,59,50),  rgb(61,102,86)),
  /* moody violet (kept to balance velvet’s new wine) */
  nightshade: linear-gradient(135deg, rgb(59,26,74),  rgb(113,59,134)),
  /* shift to blue-spruce to separate from hemlock/ivy */
  yew:        linear-gradient(135deg, rgb(16,52,73),  rgb(46,104,138)),
  /* clean mid-green (kept) */
  ivy:        linear-gradient(135deg, rgb(38,77,53),  rgb(108,169,127)),
  /* rusted red to avoid blood */
  rowan:      linear-gradient(135deg, rgb(128,49,22), rgb(176,94,52)),
  /* dusty rose vs. rowan’s rust & blood’s crimson */
  thorn:      linear-gradient(135deg, rgb(120,56,56), rgb(168,96,96))
);

$gradients-trade: (
  /* warm cream (kept) vs cooler bone */
  ivory:  linear-gradient(135deg, rgb(255,248,238), rgb(217,203,176)),
  /* wine-magenta so it’s distinct from nightshade */
  velvet: linear-gradient(135deg, rgb(76,21,38),    rgb(140,34,78)),
  /* saffron-cinnamon to sit apart from nova/amber */
  spice:  linear-gradient(135deg, rgb(186,108,43),  rgb(219,147,64)),
  /* warm ash (not another neutral grey/blue) */
  smoke:  linear-gradient(135deg, rgb(60,54,52),    rgb(170,160,150)),
  /* frosted mint (away from comet’s sky blue) */
  glass:  linear-gradient(135deg, rgb(208,236,229), rgb(160,210,196)),
  /* gold (kept) */
  gold:   linear-gradient(135deg, rgb(212,175,55),  rgb(245,215,110))
);


/* Master map (merge all). Order determines cascade if names ever collide. */
$gradients-all: map-merge(
  map-merge(
    map-merge($gradients-precious, $gradients-anatomy),
    map-merge($gradients-celestial, $gradients-flora)
  ),
  $gradients-trade
);

/* ── 2) CORE MIXINS ─────────────────────────── */

/* Utility: create classes like `.membergroup--obsidian` with a CSS var for reuse */
@mixin mg-emit-vars($map, $prefix: "membergroup") {
  @each $name, $grad in $map {
    .#{$prefix}--#{$name} {
      --mg-gradient: #{$grad};
    }
  }
}

/* Pill style (filled chip/badge) */
@mixin mg-pill($map, $prefix: "membergroup") {
  @each $name, $grad in $map {
    .#{$prefix}--#{$name}.is-pill {
      --mg-gradient: #{$grad};
      background: var(--mg-gradient);
      color: rgb(28,28,28); /* readable on most light gradients */
      /* If your theme is dark, force white text: */
      &.on-dark { color: rgb(245,245,245); }
      border-radius: 999px;
      padding: .3rem .65rem;
      display: inline-flex;
      align-items: center;
      gap: .4rem;
      border: 1px solid rgba(0,0,0,.12);
      box-shadow: 0 0 0 1px rgba(255,255,255,.06) inset;
    }
  }
}

/* Outline style (transparent fill; gradient border) */
@mixin mg-outline($map, $prefix: "membergroup") {
  @each $name, $grad in $map {
    .#{$prefix}--#{$name}.is-outline {
      --mg-gradient: #{$grad};
      background: transparent;
      color: inherit;
      border: 2px solid transparent;
      border-radius: 999px;
      padding: .25rem .6rem;
      /* border-image supports gradients nicely */
      border-image: var(--mg-gradient) 1;
    }
  }
}

/* Text gradient style (keeps container transparent) */
@mixin mg-text($map, $prefix: "membergroup") {
  @each $name, $grad in $map {
    .#{$prefix}--#{$name}.is-text {
      --mg-gradient: #{$grad};
      background: var(--mg-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      /* optional subtle stroke for dark bg legibility */
      -webkit-text-stroke: .5px rgba(0,0,0,.25);
    }
    /* stronger stroke helper for very light backgrounds */
    .#{$prefix}--#{$name}.is-text.on-light {
      -webkit-text-stroke: .65px rgba(0,0,0,.35);
    }
  }
}

/* ── 3) ONE-LINE API TO GENERATE EVERYTHING ─── */
@mixin membergroups-generate($map, $prefix: "membergroup") {
  @include mg-emit-vars($map, $prefix);
  @include mg-pill($map, $prefix);
  @include mg-outline($map, $prefix);
  @include mg-text($map, $prefix);
}

/* Emit --mg-gradient via [data-mg="..."] */
@mixin mg-emit-data-vars($map) {
  @each $name, $grad in $map {
    [data-mg="#{$name}"] { --mg-gradient: #{$grad}; }
  }
}

/* Call it for each set (or just once with $gradients-all) */
@include mg-emit-data-vars($gradients-precious);
@include mg-emit-data-vars($gradients-anatomy);
@include mg-emit-data-vars($gradients-celestial);
@include mg-emit-data-vars($gradients-flora);
@include mg-emit-data-vars($gradients-trade);
/* or: @include mg-emit-data-vars($gradients-all); */


/* ── 4) CALLS — generate per-set or all at once ─ */
@include membergroups-generate($gradients-precious);
@include membergroups-generate($gradients-anatomy);
@include membergroups-generate($gradients-celestial);
@include membergroups-generate($gradients-flora);
@include membergroups-generate($gradients-trade);

/* Or: just this one line if you prefer a single pass */
// @include membergroups-generate($gradients-all);

/* ── 5) EXAMPLES (delete/keep as docs) ──────── */
/* HTML usage:
  <span class="membergroup--obsidian is-pill">Obsidian</span>
  <span class="membergroup--blood is-outline">Blood</span>
  <span class="membergroup--nova is-text">Nova</span>

  // Optional legibility helpers based on page theme:
  <span class="membergroup--jade is-pill on-dark">Jade</span>
  <span class="membergroup--glass is-text on-light">Glass</span>
*/

/*************************************************
 Utility: apply membergroup gradients to anything
**************************************************/

/* 1) Set the active gradient from the master map */
@mixin mg-set($name, $fallback: linear-gradient(135deg, rgb(58,58,61), rgb(27,27,27))) {
  $g: map-get($gradients-all, $name);
  --mg-gradient: #{if($g, $g, $fallback)};
}

/* 2) Gradient BORDER (perfect with rounded corners)
   Uses twin-background trick so border-radius is honored.  */
@mixin mg-border($width: 2px, $radius: 8px, $bg: var(--bg, rgb(26,26,26))) {
  position: relative;
  border: $width solid transparent;
  border-radius: $radius;
  background:
    linear-gradient(#{$bg}, #{$bg}) padding-box,
    var(--mg-gradient, linear-gradient(135deg, rgb(58,58,61), rgb(27,27,27))) border-box;
}

/* 3) Gradient FILL (full background) */
@mixin mg-fill($radius: null) {
  background: var(--mg-gradient, linear-gradient(135deg, rgb(58,58,61), rgb(27,27,27)));
  @if $radius != null { border-radius: $radius; }
}

/* 4) Gradient OVERLAY (keeps original bg; adds gradient veil via ::after) */
@mixin mg-overlay($alpha: .35, $radius: inherit) {
  position: relative;
  &::after {
    content: "";
    position: absolute; inset: 0;
    border-radius: $radius;
    background: var(--mg-gradient, linear-gradient(135deg, rgb(58,58,61), rgb(27,27,27)));
    opacity: $alpha;
    pointer-events: none;
    mix-blend-mode: multiply; /* try screen for light themes */
  }
}

/* 5) Gradient TEXT (transparent fill with optional stroke) */
@mixin mg-textual($stroke: .5px, $stroke-color: rgba(0,0,0,.25)) {
  background: var(--mg-gradient, linear-gradient(135deg, rgb(58,58,61), rgb(27,27,27)));
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  -webkit-text-stroke: $stroke $stroke-color;
}

/* 6) Gradient RULE (thin bars/dividers) */
@mixin mg-rule($height: 2px, $radius: 999px) {
  height: $height;
  border-radius: $radius;
  background: var(--mg-gradient, linear-gradient(135deg, rgb(58,58,61), rgb(27,27,27)));
}

/* 7) Corner ticks fed by gradient (works with your corner-ticks aesthetic)
   Creates an inset frame using ::before so it plays nice with your own mixin. */
@mixin mg-corner-ticks-frame($inset: .5rem, $radius: 6px, $opacity: .35, $style: dashed) {
  position: relative;
  &::before {
    content: "";
    position: absolute; inset: $inset;
    border-radius: $radius;
    /* gradient stroke via border-image for the "frame" */
    border: 2px #0000; /* transparent shim for border-image */
    border-image: var(--mg-gradient, linear-gradient(135deg, rgb(58,58,61), rgb(27,27,27))) 1;
    opacity: $opacity;
    pointer-events: none;
  }
  /* If you want dashed look inside the gradient frame, add a mask: */
  &::before {
    @if $style == dashed {
      /* creates dashes by masking the gradient frame */
      -webkit-mask: 
        linear-gradient(#000 0 0) padding-box,
        repeating-linear-gradient(90deg, #000 0 8px, #0000 8px 14px) border-box;
      mask: 
        linear-gradient(#000 0 0) padding-box,
        repeating-linear-gradient(90deg, #000 0 8px, #0000 8px 14px) border-box;
    }
  }
}

/* 8) One-liners to scope by name (sugar helpers)
   Usage: @include mg-apply-border(blood); etc. */
@mixin mg-apply-border($name, $width: 2px, $radius: 8px, $bg: var(--bg, rgb(26,26,26))) {
  @include mg-set($name);
  @include mg-border($width, $radius, $bg);
}
@mixin mg-apply-fill($name, $radius: null) {
  @include mg-set($name);
  @include mg-fill($radius);
}
@mixin mg-apply-text($name, $stroke: .5px, $stroke-color: rgba(0,0,0,.25)) {
  @include mg-set($name);
  @include mg-textual($stroke, $stroke-color);
}
@mixin mg-apply-rule($name, $height: 2px, $radius: 999px) {
  @include mg-set($name);
  @include mg-rule($height, $radius);
}
@mixin mg-apply-overlay($name, $alpha: .35, $radius: inherit) {
  @include mg-set($name);
  @include mg-overlay($alpha, $radius);
}

/* Pill (filled chip) */
[data-variant="pill"] {
  background: var(--mg-gradient);
  color: var(--mg-text, rgb(28,28,28));
  border-radius: var(--mg-radius, 999px);
  padding: .3rem .65rem;
  display: inline-flex; align-items: center; gap: .4rem;
  border: 1px solid rgba(0,0,0,.12);
  box-shadow: 0 0 0 1px rgba(255,255,255,.06) inset;
}

/* Outline (gradient border) */
[data-variant="outline"] {
  background: transparent;
  color: inherit;
  border: var(--mg-border-w, 2px) solid transparent;
  border-radius: var(--mg-radius, 999px);
  padding: .25rem .6rem;
  border-image: var(--mg-gradient) 1;
}

/* Text (gradient-filled text) */
[data-variant="text"] {
  background: var(--mg-gradient);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  -webkit-text-stroke: var(--mg-stroke, .5px) var(--mg-stroke-color, rgba(0,0,0,.25));
}

/* Rule (divider bar) */
[data-variant="rule"] {
  display: block;
  height: var(--mg-rule-h, 4px);
  border-radius: var(--mg-radius, 999px);
  background: var(--mg-gradient);
}

/* Border (card with gradient border + solid fill) */
[data-variant="border"] {
  --_bg: var(--mg-bg, color-mix(in srgb, var(--bg-2) 85%, transparent));
  border: var(--mg-border-w, 2px) solid transparent;
  border-radius: var(--mg-radius, 10px);
  padding: var(--mg-pad, 1rem);
  background:
    linear-gradient(var(--_bg), var(--_bg)) padding-box,
    var(--mg-gradient) border-box;
  box-shadow: inset 0 0 0 1px color-mix(in srgb, var(--text-loCon) 12%, transparent);
}

/* Overlay (tinted panel using ::after) */
[data-variant="overlay"] {
  position: relative;
  border-radius: var(--mg-radius, 10px);
  padding: var(--mg-pad, 1rem);
  background: var(--mg-bg, color-mix(in srgb, var(--bg-2) 85%, transparent));
  overflow: hidden;
}
[data-variant="overlay"]::after {
  content: "";
  position: absolute; inset: 0;
  border-radius: inherit;
  background: var(--mg-gradient);
  mix-blend-mode: var(--mg-blend, multiply); /* try 'screen' for light themes */
  opacity: var(--mg-alpha, .35);
  pointer-events: none;
}

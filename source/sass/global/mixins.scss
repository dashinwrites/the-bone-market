$size-xxs: 480px !default;
$size-xs: 600px !default;
$size-sm: 768px !default;
$size-md: 1024px !default;
$size-lg: 1280px !default;
$size-xl: 1440px !default;
$size-xxl: 1900px !default;

@mixin mq-up($class) {
    @if $class == xxs {
        @media (min-width: ($size-xxs +1)) { @content; }
    }
    @else if $class == xs {
        @media (min-width: ($size-xs +1)) { @content; }
    }
    @else if $class == sm {
        @media (min-width: ($size-sm +1)) { @content; }
    }
    @else if $class == md {
        @media (min-width: ($size-md +1)) { @content; }
    }
    @else if $class == lg {
        @media (min-width: ($size-lg +1)) { @content; }
    }
    @else if $class == xl {
        @media (min-width: ($size-xl +1)) { @content; }
    }
    @else if $class == xxl {
        @media (min-width: ($size-xxl +1)) { @content; }
    }
    @else {
        @warn "Breakpoint mixin supports: xxs to xxl";
    }
}

@mixin mq-down($class) {
    @if $class == xxs {
        @media (max-width: $size-xxs) { @content; }
    }
    @else if $class == xs {
        @media (max-width: $size-xs) { @content; }
    }
    @else if $class == sm {
        @media (max-width: $size-sm) { @content; }
    }
    @else if $class == md {
        @media (max-width: $size-md) { @content; }
    }
    @else if $class == lg {
        @media (max-width: $size-lg) { @content; }
    }
    @else if $class == xl {
        @media (max-width: $size-xl) { @content; }
    }
    @else if $class == xxl {
        @media (max-width: $size-xxl) { @content; }
    }
}

@mixin fluid-type($font-min, $font-max, $screen-min, $screen-max) {
    font-size: #{$font-min}px;

    @media only screen and (min-width: #{$screen-min}px) {
        font-size: calc(#{$font-min}px + #{($font-max - $font-min)} * (100vw - #{$screen-min}px) / (#{$screen-max} - #{$screen-min}));
    }

    @media only screen and (min-width: #{$screen-max}px) {
        font-size: #{$font-max}px;
    }
}

@mixin focus-ring($c: var(--accent-3)) {
  outline: none;
  box-shadow: 0 0 0 2px $c, 0 0 0 4px rgba(0,0,0,.15);
}

@mixin pseudo-frame($skip-top: false, $skip-solid: false, $radius: 4px) {
  position: relative;
  isolation: isolate;
  border-radius: $radius;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: var(--border-1);
    @if $skip-top { border-top: none; }
    @if $skip-solid { border: none; }
    border-radius: inherit;
    pointer-events: none;
    z-index: -1;
  }

  &::after {
    content: "";
    position: absolute;
    inset: 2px;
    border: var(--bdash);
    opacity: .35;
    border-radius: inherit;
    pointer-events: none;
    z-index: -1;
  }
}

@mixin inner-line($inset: 2px, $border: var(--bdash), $opacity: .35) {
  &::after {
    content: "";
    position: absolute;
    inset: $inset;
    border: $border;
    opacity: $opacity;
    pointer-events: none;
    border-radius: inherit;
    z-index: -1;
  }
}

@mixin corner-ticks($inset: .5rem, $len: 18px, $thick: 2px, $opacity: .25) {
  &::after {
    content: "";
    position: absolute;
    inset: $inset;
    pointer-events: none;
    opacity: $opacity;
    background:
      linear-gradient(currentColor, currentColor) left   top    / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) left   top    / #{$thick} #{$len} no-repeat,
      linear-gradient(currentColor, currentColor) right  top    / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) right  top    / #{$thick} #{$len} no-repeat,
      linear-gradient(currentColor, currentColor) left   bottom / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) left   bottom / #{$thick} #{$len} no-repeat,
      linear-gradient(currentColor, currentColor) right  bottom / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) right  bottom / #{$thick} #{$len} no-repeat;
    z-index: 2;
  }
}

@mixin pseudo-border($skip-top: false, $radius: 4px) {
  position: relative;
  isolation: isolate;
  border-radius: $radius;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: var(--border-1);
    @if $skip-top { border-top: none; }
    border-radius: inherit;
    pointer-events: none;
    z-index: -1;
  }
}

// Shared pseudo defaults for all plate modes
@mixin plate-base($which: before) {
  &::#{$which} {
    content: "";
    background-repeat: no-repeat;
    background-size: contain;
    background-position: center;
    pointer-events: none;
  }
}

// Placement variants
@mixin plate-watermark {
  @include plate-base(before);

  &::before {
    position: absolute;
    inset: 0;
    background-image: var(--plate-img);
    background-size: var(--plate-size, contain);
    background-position: var(--plate-pos, center);
    opacity: var(--plate-alpha, .18);
    mix-blend-mode: var(--plate-blend, multiply);
    z-index: 1; // below title/meta
  }
}

@mixin plate-side {
  display: grid;
  grid-template-columns: var(--plate-w, 96px) 1fr auto;
  column-gap: 1rem;
  block-size: var(--cat-head-h, 8rem);
  overflow: hidden;
  align-items: center;
  justify-content: center;

  @include plate-base(before);

  &::before {
    content: "";
    opacity: var(--plate-alpha);
    inline-size: var(--plate-w, 96px);
    block-size: calc(var(--cat-head-h, 8rem) * var(--cameo-scale, 1.6));
    background-image: var(--plate-img);
    background-repeat: no-repeat;
    background-size: contain;
    background-position: center;
    justify-self: center;
    align-self: center;
  }
}

@mixin plate-anchor {
  @include plate-base(after);

  &::after {
    position: absolute;
    left: 25%;
    transform: translateX(-50%);
    bottom: calc(-1 * var(--plate-h, 120px) * .28);
    width: var(--plate-w, 140px);
    height: var(--plate-h, 140px);
    background-image: var(--plate-img);
    opacity: var(--plate-alpha, .75);
    z-index: 1;
  }
}

/* =========================================
   Plate Button Mixin (theme-toggle style)
   ========================================= */

@mixin plate-button(
  $radius: 6px,
  $pad: 0.4rem,
  $size: null,                 /* square size for icon-only buttons */
  $font-size: var(--size-lg),
  $icon-size: 0.75rem,
  $hover-accent: var(--accent-1),
  $inset: 2px                  /* dashed inset thickness */
) {
  position: relative;
  pointer-events: auto;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;

  // padding vs square size
  @if $size != null {
    inline-size: $size;
    block-size: $size;
    padding: 0;
  } @else {
    padding: $pad;
  }

  background: var(--plate-bg);
  border: var(--plate-border);
  border-radius: $radius;

  font-family: var(--font-serif);
  font-size: $font-size;
  letter-spacing: 0.03em;
  color: var(--plate-text, var(--text-clear));
  line-height: 1;
  cursor: pointer;
  isolation: isolate;
  transition: var(--transi-quick);

  // base elevation + clear plate
  box-shadow:
    0 1px 0 rgba(0, 0, 0, 0.15),
    inset 0 0 0 999px rgba(0, 0, 0, 0);

  // dashed inset like your toggle
  &::before {
    content: "";
    position: absolute;
    inset: $inset;
    border: var(--bdash);
    opacity: 0.35;
    pointer-events: none;
    border-radius: max($radius - 2px, 0px);
  }

  // icon inside keeps currentColor
  i {
    font-size: $icon-size;
    line-height: 1;
    color: currentColor;
    display: inline-block;
  }

  // interactions
  &:hover {
    transform: translateY(-1px);
    box-shadow:
      0 2px 6px rgba(0, 0, 0, 0.18),
      inset 0 0 0 999px rgba(0, 0, 0, 0.02);
    color: $hover-accent;
  }
  &:active {
    transform: translateY(0);
    box-shadow:
      0 1px 2px rgba(0, 0, 0, 0.2),
      inset 0 0 0 999px rgba(0, 0, 0, 0.04);
  }
  &:focus-visible {
    outline: none;
    box-shadow:
      0 0 0 2px var(--accent-3),
      0 0 0 4px rgba(0, 0, 0, 0.15);
  }
}

/* Optional: current/active state helper */
@mixin plate-active {
  color: var(--accent-1);
  box-shadow:
    0 2px 6px rgba(0, 0, 0, 0.18),
    inset 0 0 0 999px rgba(0, 0, 0, 0.045);
}

/* Optional: tooltip pulled from a data attribute (e.g., data-label) */
@mixin plate-tooltip($attr: 'data-label', $side: right, $gap: 8px) {
  &[#{$attr}]::after {
    content: attr(#{$attr});
    position: absolute;

    @if $side == right {
      inset-inline-start: calc(100% + #{$gap});
      inset-block-start: 50%;
      transform: translateY(-50%) scale(0.98);
      transform-origin: left center;
    } @else if $side == left {
      inset-inline-end: calc(100% + #{$gap});
      inset-block-start: 50%;
      transform: translateY(-50%) scale(0.98);
      transform-origin: right center;
    } @else if $side == top {
      inset-inline-start: 50%;
      inset-block-end: calc(100% + #{$gap});
      transform: translate(-50%, 0) scale(0.98);
      transform-origin: center bottom;
    } @else { // bottom
      inset-inline-start: 50%;
      inset-block-start: calc(100% + #{$gap});
      transform: translate(-50%, 0) scale(0.98);
      transform-origin: center top;
    }

    white-space: nowrap;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font: 500 var(--size-sm) var(--font-serif);
    letter-spacing: 0.02em;

    background: var(--plate-bg);
    border: var(--plate-border);
    color: var(--plate-text, var(--text-clear));
    box-shadow: 0 4px 12px rgba(0,0,0,0.18);

    opacity: 0;
    pointer-events: none;
    transition: var(--transi-quick);
  }

  &:hover::after {
    opacity: 1;
    @if $side == right or $side == left {
      transform: translateY(-50%) scale(1);
    } @else {
      transform: translate(-50%, 0) scale(1);
    }
  }
}

/* Optional: respect prefers-reduced-motion on anything you include this on */
@mixin reduce-motion {
  @media (prefers-reduced-motion: reduce) {
    & { transition: none; }
    &:hover { transform: none; }
  }
}

/* Gradient underline mixin */
@mixin gradient-underline(
  $w: 100%,                 // underline width
  $h: 1px,                 // thickness
  $offset: .2em,           // gap under text
  $from: var(--accent-1),  // left color
  $to:   var(--accent-2),  // right color
  $radius: 2px,             // corner radius
  $s-op: 0.85,           // start opacity
  $h-op: 1                  // hover opacity
){
  position: relative;
  &::after{
    content: "";
    position: absolute;
    left: 0; right: 0;
    bottom: calc(-#{$offset} - #{$h});
    margin-inline: auto;
    width: $w;
    height: $h;
    border-radius: $radius;
    background: linear-gradient(90deg, $from, $to);
    /* subtle shine */
    box-shadow: 0 0 0 1px color-mix(in srgb, #000 6%, transparent),
                0 2px 6px rgba(0,0,0,.15);
    transform: scaleX(0.9);
    opacity: $s-op;
    transform-origin: center;
    transition: transform .25s ease, opacity .25s ease, width .25s ease;
  }

  /* grow on hover/focus (optional) */
  &:where(:hover, :focus-visible)::after{
    transform: scaleX(1);
    opacity: $h-op;
  }
}

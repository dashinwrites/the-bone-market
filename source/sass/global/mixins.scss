$size-xxs: 480px !default;
$size-xs: 600px !default;
$size-sm: 768px !default;
$size-md: 1024px !default;
$size-lg: 1280px !default;
$size-xl: 1440px !default;
$size-xxl: 1900px !default;

@mixin mq-up($class) {
    @if $class == xxs {
        @media (min-width: ($size-xxs +1)) { @content; }
    }
    @else if $class == xs {
        @media (min-width: ($size-xs +1)) { @content; }
    }
    @else if $class == sm {
        @media (min-width: ($size-sm +1)) { @content; }
    }
    @else if $class == md {
        @media (min-width: ($size-md +1)) { @content; }
    }
    @else if $class == lg {
        @media (min-width: ($size-lg +1)) { @content; }
    }
    @else if $class == xl {
        @media (min-width: ($size-xl +1)) { @content; }
    }
    @else if $class == xxl {
        @media (min-width: ($size-xxl +1)) { @content; }
    }
    @else {
        @warn "Breakpoint mixin supports: xxs to xxl";
    }
}

@mixin mq-down($class) {
    @if $class == xxs {
        @media (max-width: $size-xxs) { @content; }
    }
    @else if $class == xs {
        @media (max-width: $size-xs) { @content; }
    }
    @else if $class == sm {
        @media (max-width: $size-sm) { @content; }
    }
    @else if $class == md {
        @media (max-width: $size-md) { @content; }
    }
    @else if $class == lg {
        @media (max-width: $size-lg) { @content; }
    }
    @else if $class == xl {
        @media (max-width: $size-xl) { @content; }
    }
    @else if $class == xxl {
        @media (max-width: $size-xxl) { @content; }
    }
}

@mixin fluid-type($font-min, $font-max, $screen-min, $screen-max) {
    font-size: #{$font-min}px;

    @media only screen and (min-width: #{$screen-min}px) {
        font-size: calc(#{$font-min}px + #{($font-max - $font-min)} * (100vw - #{$screen-min}px) / (#{$screen-max} - #{$screen-min}));
    }

    @media only screen and (min-width: #{$screen-max}px) {
        font-size: #{$font-max}px;
    }
}

@mixin focus-ring($c: var(--accent-3)) {
  outline: none;
  box-shadow: 0 0 0 2px $c, 0 0 0 4px rgba(0,0,0,.15);
}

@mixin pseudo-frame($skip-top: false, $skip-solid: false, $radius: 4px) {
  position: relative;
  isolation: isolate;
  border-radius: $radius;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: var(--border-1);
    @if $skip-top { border-top: none; }
    @if $skip-solid { border: none; }
    border-radius: inherit;
    pointer-events: none;
    z-index: -1;
  }

  &::after {
    content: "";
    position: absolute;
    inset: 2px;
    border: var(--bdash);
    opacity: .35;
    border-radius: inherit;
    pointer-events: none;
    z-index: -1;
  }
}

@mixin inner-line($inset: 2px, $border: var(--bdash), $opacity: .35) {
  &::after {
    content: "";
    position: absolute;
    inset: $inset;
    border: $border;
    opacity: $opacity;
    pointer-events: none;
    border-radius: inherit;
    z-index: -1;
  }
}

@mixin corner-ticks($inset: .5rem, $len: 18px, $thick: 2px, $opacity: .25) {
  &::after {
    content: "";
    position: absolute;
    inset: $inset;
    pointer-events: none;
    opacity: $opacity;
    background:
      linear-gradient(currentColor, currentColor) left   top    / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) left   top    / #{$thick} #{$len} no-repeat,
      linear-gradient(currentColor, currentColor) right  top    / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) right  top    / #{$thick} #{$len} no-repeat,
      linear-gradient(currentColor, currentColor) left   bottom / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) left   bottom / #{$thick} #{$len} no-repeat,
      linear-gradient(currentColor, currentColor) right  bottom / #{$len} #{$thick} no-repeat,
      linear-gradient(currentColor, currentColor) right  bottom / #{$thick} #{$len} no-repeat;
    z-index: 2;
  }
}

@mixin pseudo-border($skip-top: false, $radius: 4px) {
  position: relative;
  isolation: isolate;
  border-radius: $radius;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: var(--border-1);
    @if $skip-top { border-top: none; }
    border-radius: inherit;
    pointer-events: none;
    z-index: -1;
  }
}

// Shared pseudo defaults for all plate modes
@mixin plate-base($which: before) {
  &::#{$which} {
    content: "";
    background-repeat: no-repeat;
    background-size: contain;
    background-position: center;
    pointer-events: none;
  }
}

// Placement variants
@mixin plate-watermark {
  @include plate-base(before);

  &::before {
    position: absolute;
    inset: 0;
    background-image: var(--plate-img);
    background-size: var(--plate-size, contain);
    background-position: var(--plate-pos, center);
    opacity: var(--plate-alpha, .18);
    mix-blend-mode: var(--plate-blend, multiply);
    z-index: 1; // below title/meta
  }
}

@mixin plate-side {
  display: grid;
  grid-template-columns: var(--plate-w, 96px) 1fr auto;
  column-gap: 1rem;
  block-size: var(--cat-head-h, 8rem);
  overflow: hidden;
  align-items: center;
  justify-content: center;

  @include plate-base(before);

  &::before {
    content: "";
    opacity: var(--plate-alpha);
    inline-size: var(--plate-w, 96px);
    block-size: calc(var(--cat-head-h, 8rem) * var(--cameo-scale, 1.6));
    background-image: var(--plate-img);
    background-repeat: no-repeat;
    background-size: contain;
    background-position: center;
    justify-self: center;
    align-self: center;
  }
}

@mixin plate-anchor {
  @include plate-base(after);

  &::after {
    position: absolute;
    left: 25%;
    transform: translateX(-50%);
    bottom: calc(-1 * var(--plate-h, 120px) * .28);
    width: var(--plate-w, 140px);
    height: var(--plate-h, 140px);
    background-image: var(--plate-img);
    opacity: var(--plate-alpha, .75);
    z-index: 1;
  }
}